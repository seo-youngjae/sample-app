pipeline {
    agent any

    environment {
        APP_NAME = "my-flask-app"
        IMAGE_TAG = "latest"

        // SKALA ÎÇ¥Î∂Ä Î†àÏßÄÏä§Ìä∏Î¶¨ (Harbor)
        REGISTRY = "amdp-registry.skala-ai.com"
        REPO = "${REGISTRY}/skala25a/${APP_NAME}"
        DOCKER_CREDENTIALS_ID = "skala-image-registry-id"

        // Git Repo
        GIT_URL = "https://github.com/seo-youngjae/sample-app.git"
        GIT_BRANCH = "main"

        // K8s Namespace (ÍµêÏú°Ïö© ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§)
        K8S_NAMESPACE = "skala-practice"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -f app.Dockerfile -t ${REPO}:${IMAGE_TAG} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin ${REGISTRY}
                    docker push ${REPO}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to K8s') {
            steps {
                sh "kubectl apply -f k8s/ -n ${K8S_NAMESPACE}"
            }
        }
    }

    post {
        success { echo 'Pipeline success üéâ' }
        failure { echo 'Pipeline failed üí•' }
        always  { echo 'Pipeline finished ‚úÖ' }
    }
}



// pipeline {
//   agent any

//   environment {
//     // === ÏÇ¨Ïö©Ïûê ÏàòÏ†ï ÏòÅÏó≠ ===
//     GIT_URL                = 'https://github.com/seo-youngjae/myfirst-python-app.git'
//     GIT_BRANCH             = 'main'
//     GIT_ID                 = 'skala-github-id'   // GitHub PAT credential ID
//     IMAGE_NAME             = 'sk010-myfirst-python-app'
//     // =======================
//     IMAGE_TAG              = '1.0.0'
//     IMAGE_REGISTRY_URL     = 'amdp-registry.skala-ai.com'
//     IMAGE_REGISTRY_PROJECT = 'skala25a'

//     DOCKER_CREDENTIAL_ID   = 'skala-image-registry-id'  // Harbor Ïù∏Ï¶ù Ï†ïÎ≥¥ ID
//     K8S_NAMESPACE          = 'skala-practice'
//   }

//   options {
//     disableConcurrentBuilds()
//     timestamps()
//   }

//   stages {
//     stage('Clone Repository') {
//       steps {
//         echo '=== Clone Repository ==='
//         git branch: "${GIT_BRANCH}", url: "${GIT_URL}", credentialsId: "${GIT_ID}"
//       }
//     }

//     stage('Install & Test (Python)') {
//       steps {
//         echo '=== Install Dependencies & Run Tests ==='
//         sh '''
//           set -eux
//           python3 -m venv venv
//           . venv/bin/activate
//           pip install --upgrade pip
//           pip install -r requirements.txt
//           pytest || echo "‚ö†Ô∏è Tests failed or not present"
//         '''
//       }
//     }

//     stage('Compute Image Meta') {
//       steps {
//         script {
//           def hashcode = sh(script: "date +%s%N | sha256sum | cut -c1-12", returnStdout: true).trim()
//           env.FINAL_IMAGE_TAG = "${IMAGE_TAG}-${hashcode}"
//           env.IMAGE_REGISTRY  = "${env.IMAGE_REGISTRY_URL}/${env.IMAGE_REGISTRY_PROJECT}"
//           env.REG_HOST        = env.IMAGE_REGISTRY_URL
//           env.IMAGE_REF       = "${env.IMAGE_REGISTRY}/${IMAGE_NAME}:${env.FINAL_IMAGE_TAG}"

//           echo "REG_HOST: ${env.REG_HOST}"
//           echo "IMAGE_REF: ${env.IMAGE_REF}"
//         }
//       }
//     }

//     stage('Image Build & Push (docker)') {
//       steps {
//         script {
//           docker.withRegistry("https://${IMAGE_REGISTRY}", "${DOCKER_CREDENTIAL_ID}") {
//             def appImage = docker.build("${IMAGE_REF}", "--platform=linux/amd64 .")
//             appImage.push()
//           }
//         }
//       }
//     }

//     stage('Update K8s Manifests') {
//       steps {
//         script {
//           echo '=== Update deploy.yaml with new image tag ==='
//         }
//         sh '''
//           set -eux
//           test -f ./k8s/deploy.yaml

//           echo "--- BEFORE ---"
//           grep -n 'image:' ./k8s/deploy.yaml || true

//           sed -Ei "s#(image:[[:space:]]*$IMAGE_REGISTRY/$IMAGE_NAME)[^[:space:]]+#\\1:$FINAL_IMAGE_TAG#" ./k8s/deploy.yaml

//           echo "--- AFTER ---"
//           grep -n 'image:' ./k8s/deploy.yaml || true
//         '''
//       }
//     }

//     stage('Git Commit & Push (gitops)') {
//       steps {
//         sh '''
//           set -eux
//           git config --global --add safe.directory '*'
//           git config --global user.name "skala-gitops"
//           git config --global user.email "skala@skala-ai.com"

//           git fetch origin || true
//           cp ./k8s/deploy.yaml ./k8s/deploy.yaml.backup

//           if git show-ref --verify --quiet refs/heads/gitops || git show-ref --verify --quiet refs/remotes/origin/gitops; then
//               git checkout -f gitops || git checkout -B gitops origin/gitops
//           else
//               git checkout -b gitops
//           fi

//           cp ./k8s/deploy.yaml.backup ./k8s/deploy.yaml
//           sed -Ei "s#(image:[[:space:]]*${IMAGE_REGISTRY}/${IMAGE_NAME})[^[:space:]]+#\\1:${FINAL_IMAGE_TAG}#" ./k8s/deploy.yaml
//           rm -f ./k8s/deploy.yaml.backup

//           git add ./k8s/deploy.yaml || true
//           git status
//         '''

//         withCredentials([usernamePassword(
//           credentialsId: "${env.GIT_ID}",
//           usernameVariable: 'GIT_PUSH_USER',
//           passwordVariable: 'GIT_PUSH_PASSWORD'
//         )]) {
//           script {
//             env.GIT_REPO_PATH = env.GIT_URL.replaceFirst(/^https?:\/\//, '')
//             sh '''
//               set -eux
//               if ! git diff --cached --quiet; then
//                   git commit -m "[AUTO] Update deploy.yaml with image $FINAL_IMAGE_TAG"
//                   git remote set-url origin https://$GIT_PUSH_USER:$GIT_PUSH_PASSWORD@$GIT_REPO_PATH
//                   git push origin gitops --force
//                   echo "Pushed to gitops"
//               else
//                   echo "No changes to commit"
//               fi
//             '''
//           }
//         }
//       }
//     }
//   }
// }
